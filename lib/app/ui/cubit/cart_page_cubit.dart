import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:yemek_soyle_app/app/data/entity/cart_foods.dart';
import 'package:yemek_soyle_app/app/data/repo/foodsdao_repository.dart';

class CartPageCubit extends Cubit<List<CartFoods>> {
  CartPageCubit() : super(<CartFoods>[]);

  //yrepo = yemeker Dao Repo nesnesi
  var yrepo = FoodsDaoRepository();

  Future<void> loadCartFoods() async {
    var list = await yrepo.loadCartFoods();
    emit(list);
  }

  Future<void> addToCart(CartFoods foodToAdd) async {
    await yrepo.addToCart(foodToAdd);
    await loadCartFoods();
  }

  Future<void> removeFromCart(CartFoods foodToRemove) async {
    await yrepo.removeFromCart(foodToRemove);
    await loadCartFoods();
  }

  Future<void> updateCartQuantity(CartFoods cartFood, int newQuantity) async {
    // If quantity is zero or less, just remove the item
    if (newQuantity <= 0) {
      await removeFromCart(cartFood);
      return;
    }

    // API does not provide partial update; emulate by deleting and re-adding
    await yrepo.removeFromCart(cartFood);

    final updated = CartFoods(
      id: cartFood.id, // id will be re-generated by backend; kept for completeness
      name: cartFood.name,
      image: cartFood.image,
      price: cartFood.price,
      orderQuantity: newQuantity.toString(),
      username: cartFood.username,
    );

    await yrepo.addToCart(updated);
    await loadCartFoods();
  }

  Future<void> clearCart() async {
    // Get current cart items
    final currentCart = state;

    // Remove each item from cart
    for (final item in currentCart) {
      await yrepo.removeFromCart(item);
    }

    // Emit empty list
    emit(<CartFoods>[]);
  }
}
